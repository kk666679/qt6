// main.qml
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Shapes 1.15
import QtGraphicalEffects 1.15

ApplicationWindow {
    id: mainWindow
    width: 1200
    height: 700
    visible: true
    title: "Qt6 Automotive Dashboard"
    color: "#050a1a"
    
    // Simulated vehicle data
    property real speed: 0
    property real rpm: 0
    property real fuel: 75
    property real engineTemp: 85
    property real batteryVoltage: 12.4
    property real odometer: 12456
    property real tripMeter: 45.2
    property string gear: "D"
    property bool leftTurnSignal: false
    property bool rightTurnSignal: false
    property bool highBeam: false
    property bool parkingBrake: false
    property bool checkEngine: false
    property bool lowFuel: false
    
    // Animation timer
    Timer {
        interval: 100
        running: true
        repeat: true
        onTriggered: {
            // Simulate driving
            if (speed < 85) speed += 0.5;
            if (rpm < 6500) rpm += 50;
            if (fuel > 0) fuel -= 0.01;
            tripMeter += 0.01;
            
            // Simulate turn signals
            if (Math.random() > 0.9) leftTurnSignal = !leftTurnSignal;
            if (Math.random() > 0.9) rightTurnSignal = !rightTurnSignal;
            
            // Simulate warnings
            if (fuel < 15) lowFuel = true;
            if (engineTemp > 95) checkEngine = true;
        }
    }
    
    // Main dashboard layout
    Rectangle {
        anchors.fill: parent
        gradient: Gradient {
            GradientStop { position: 0.0; color: "#050a1a" }
            GradientStop { position: 1.0; color: "#0a1432" }
        }
        
        // Speed and RPM gauges
        Row {
            anchors.centerIn: parent
            spacing: 80
            
            // Speed gauge
            CircularGauge {
                id: speedGauge
                width: 400
                height: 400
                minValue: 0
                maxValue: 220
                value: speed
                label: "km/h"
                
                Behavior on value {
                    NumberAnimation { duration: 200 }
                }
            }
            
            // RPM gauge
            CircularGauge {
                id: rpmGauge
                width: 400
                height: 400
                minValue: 0
                maxValue: 8000
                value: rpm
                label: "RPM"
                color: "#ff3d3d"
                
                Behavior on value {
                    NumberAnimation { duration: 200 }
                }
            }
        }
        
        // Bottom panel with secondary gauges
        Rectangle {
            id: bottomPanel
            width: parent.width
            height: 200
            anchors.bottom: parent.bottom
            color: "transparent"
            
            Row {
                anchors.centerIn: parent
                spacing: 40
                
                // Fuel gauge
                LinearGauge {
                    id: fuelGauge
                    width: 150
                    height: 40
                    minValue: 0
                    maxValue: 100
                    value: fuel
                    label: "FUEL"
                    unit: "%"
                    warning: lowFuel
                }
                
                // Temperature gauge
                LinearGauge {
                    id: tempGauge
                    width: 150
                    height: 40
                    minValue: 50
                    maxValue: 120
                    value: engineTemp
                    label: "TEMP"
                    unit: "¬∞C"
                    warning: engineTemp > 95
                }
                
                // Battery gauge
                LinearGauge {
                    id: batteryGauge
                    width: 150
                    height: 40
                    minValue: 10
                    maxValue: 15
                    value: batteryVoltage
                    label: "BATT"
                    unit: "V"
                }
            }
        }
        
        // Center information cluster
        Rectangle {
            id: infoCluster
            width: 300
            height: 150
            anchors.centerIn: parent
            color: "transparent"
            
            Column {
                anchors.centerIn: parent
                spacing: 10
                
                Text {
                    text: gear
                    font.pixelSize: 60
                    font.bold: true
                    color: "white"
                    horizontalAlignment: Text.AlignHCenter
                    width: parent.width
                }
                
                Row {
                    spacing: 40
                    
                    Column {
                        Text {
                            text: "ODOMETER"
                            font.pixelSize: 14
                            color: "#aaa"
                        }
                        Text {
                            text: odometer.toFixed(0) + " km"
                            font.pixelSize: 24
                            color: "white"
                        }
                    }
                    
                    Column {
                        Text {
                            text: "TRIP"
                            font.pixelSize: 14
                            color: "#aaa"
                        }
                        Text {
                            text: tripMeter.toFixed(1) + " km"
                            font.pixelSize: 24
                            color: "white"
                        }
                    }
                }
            }
        }
        
        // Warning indicators
        Column {
            x: 20
            y: 20
            spacing: 15
            
            WarningLight {
                active: parkingBrake
                icon: "üöó"
                label: "PARK BRAKE"
            }
            
            WarningLight {
                active: checkEngine
                icon: "‚öôÔ∏è"
                label: "CHECK ENGINE"
            }
            
            WarningLight {
                active: lowFuel
                icon: "‚õΩ"
                label: "LOW FUEL"
            }
        }
        
        // Turn signals
        Row {
            anchors.top: parent.top
            anchors.horizontalCenter: parent.horizontalCenter
            spacing: 300
            
            TurnSignal {
                active: leftTurnSignal
                direction: "left"
            }
            
            TurnSignal {
                active: rightTurnSignal
                direction: "right"
            }
        }
        
        // High beam indicator
        Text {
            anchors {
                bottom: infoCluster.top
                horizontalCenter: parent.horizontalCenter
                bottomMargin: 20
            }
            text: "HIGH BEAM"
            font.pixelSize: 18
            color: highBeam ? "#00a8ff" : "#444"
            visible: highBeam
        }
        
        // Date and time
        Text {
            anchors {
                top: parent.top
                right: parent.right
                margins: 20
            }
            text: Qt.formatDateTime(new Date(), "hh:mm ap | ddd, MMM d")
            font.pixelSize: 18
            color: "#aaa"
        }
        
        // Logo
        Text {
            anchors {
                bottom: parent.bottom
                right: parent.right
                margins: 20
            }
            text: "QT6 AUTOMOTIVE"
            font.pixelSize: 16
            color: "#00a8ff"
            font.bold: true
        }
    }
    
    // Circular gauge component
    component CircularGauge : Item {
        property real minValue: 0
        property real maxValue: 100
        property real value: 0
        property string label: ""
        property color color: "#00a8ff"
        
        Rectangle {
            anchors.fill: parent
            radius: width / 2
            color: "#101a33"
            border.width: 2
            border.color: "#1a2a5a"
        }
        
        // Gauge track
        Shape {
            anchors.fill: parent
            layer.enabled: true
            layer.samples: 8
            
            ShapePath {
                strokeWidth: 10
                strokeColor: "#1a2a5a"
                fillColor: "transparent"
                capStyle: ShapePath.RoundCap
                
                PathAngleArc {
                    centerX: parent.width / 2
                    centerY: parent.height / 2
                    radiusX: parent.width / 2 - 30
                    radiusY: parent.width / 2 - 30
                    startAngle: 135
                    sweepAngle: 270
                }
            }
            
            // Gauge value
            ShapePath {
                strokeWidth: 10
                strokeColor: color
                fillColor: "transparent"
                capStyle: ShapePath.RoundCap
                
                PathAngleArc {
                    centerX: parent.width / 2
                    centerY: parent.height / 2
                    radiusX: parent.width / 2 - 30
                    radiusY: parent.width / 2 - 30
                    startAngle: 135
                    sweepAngle: 270 * (value / (maxValue - minValue))
                }
            }
        }
        
        // Needle
        Rectangle {
            id: needle
            width: 4
            height: parent.height / 2 - 50
            color: "white"
            x: parent.width / 2 - width / 2
            y: parent.height / 2
            transformOrigin: Item.Bottom
            rotation: 135 + 270 * (value / (maxValue - minValue))
            
            Rectangle {
                width: 15
                height: 15
                radius: width / 2
                color: "#ff3d3d"
                anchors.horizontalCenter: parent.horizontalCenter
                anchors.bottom: parent.bottom
            }
        }
        
        // Center circle
        Rectangle {
            width: 50
            height: 50
            radius: width / 2
            color: "#0a1432"
            border.width: 2
            border.color: "#1a2a5a"
            anchors.centerIn: parent
        }
        
        // Value text
        Text {
            anchors.centerIn: parent
            text: value.toFixed(0)
            font.pixelSize: 50
            font.bold: true
            color: "white"
        }
        
        // Label
        Text {
            anchors {
                top: parent.verticalCenter
                topMargin: 40
                horizontalCenter: parent.horizontalCenter
            }
            text: label
            font.pixelSize: 20
            color: "#aaa"
        }
        
        // Min/Max values
        Text {
            anchors {
                bottom: parent.verticalCenter
                bottomMargin: 40
                left: parent.left
                leftMargin: 60
            }
            text: minValue
            font.pixelSize: 16
            color: "#aaa"
        }
        
        Text {
            anchors {
                bottom: parent.verticalCenter
                bottomMargin: 40
                right: parent.right
                rightMargin: 60
            }
            text: maxValue
            font.pixelSize: 16
            color: "#aaa"
        }
    }
    
    // Linear gauge component
    component LinearGauge : Item {
        property real minValue: 0
        property real maxValue: 100
        property real value: 0
        property string label: ""
        property string unit: ""
        property bool warning: false
        
        width: 150
        height: 40
        
        Rectangle {
            anchors.fill: parent
            color: "#0a1432"
            radius: 5
            border.width: 1
            border.color: "#1a2a5a"
        }
        
        // Track
        Rectangle {
            width: parent.width - 20
            height: 10
            anchors.centerIn: parent
            color: "#1a2a5a"
            radius: 5
        }
        
        // Value indicator
        Rectangle {
            width: (parent.width - 20) * (value / (maxValue - minValue))
            height: 10
            anchors {
                left: parent.left
                leftMargin: 10
                verticalCenter: parent.verticalCenter
            }
            color: warning ? "#ff3d3d" : "#00a8ff"
            radius: 5
        }
        
        // Label
        Text {
            anchors {
                left: parent.left
                leftMargin: 10
                top: parent.top
                topMargin: 5
            }
            text: label
            font.pixelSize: 14
            color: "#aaa"
        }
        
        // Value text
        Text {
            anchors {
                right: parent.right
                rightMargin: 10
                bottom: parent.bottom
                bottomMargin: 5
            }
            text: value.toFixed(1) + " " + unit
            font.pixelSize: 14
            color: warning ? "#ff3d3d" : "white"
            font.bold: warning
        }
    }
    
    // Warning light component
    component WarningLight : Row {
        property bool active: false
        property string icon: ""
        property string label: ""
        
        spacing: 10
        
        Rectangle {
            width: 40
            height: 40
            radius: 5
            color: active ? "#ff3d3d" : "#1a2a5a"
            
            Text {
                anchors.centerIn: parent
                text: icon
                font.pixelSize: 20
            }
        }
        
        Text {
            text: label
            font.pixelSize: 16
            color: active ? "#ff3d3d" : "#aaa"
            font.bold: active
        }
    }
    
    // Turn signal component
    component TurnSignal : Item {
        property bool active: false
        property string direction: "left"
        
        width: 60
        height: 60
        
        Rectangle {
            anchors.fill: parent
            color: active ? "#00a8ff" : "#1a2a5a"
            radius: width / 2
            border.width: 2
            border.color: "#2a3a6a"
            
            Text {
                anchors.centerIn: parent
                text: direction === "left" ? "‚Üê" : "‚Üí"
                font.pixelSize: 30
                color: active ? "white" : "#555"
            }
        }
        
        // Animation for blinking
        SequentialAnimation on opacity {
            running: active
            loops: Animation.Infinite
            PropertyAnimation { to: 0.3; duration: 300 }
            PropertyAnimation { to: 1; duration: 300 }
        }
    }
}